.task__container{
    border-radius: 8px;
    box-shadow: 0 1px 2px 0 rgba(60, 64, 67, 0.062), 0 2px 6px 2px rgba(60, 64, 67, 0.123);
    padding:10px;
    margin-top: 40px;
}





@import url("https://fonts.googleapis.com/css?family=Dosis");

:root {
  /* generic */
  --gutterSm: 0.4rem;
  --gutterMd: 0.8rem;
  --gutterLg: 1.6rem;
  --gutterXl: 2.4rem;
  --gutterXx: 7.2rem;
  --fontFamily: "Dosis", sans-serif;
  --fontSizeSm: 14px;
  --fontSizeMd: 14px;
  --fontSizeLg: 14px;
  --fontSizeXl: 14px;
  --fontSizeXx: 14px;
  --lineHeightSm: 1.1;
  --lineHeightMd: 1.8;
  --transitionDuration: 300ms;
  --transitionTF: cubic-bezier(0.645, 0.045, 0.355, 1);

  /* floated labels */
  --inputPaddingV: var(--gutterMd);
  --inputPaddingH: var(--gutterLg);
  --inputFontSize: var(--fontSizeLg);
  --inputLineHeight: var(--lineHeightMd);
  --labelScaleFactor: 0.8;
  --labelDefaultPosY: 50%;
  --labelTransformedPosY: calc(
    (var(--labelDefaultPosY)) - (var(--inputPaddingV) * var(--labelScaleFactor)) -
      (var(--inputFontSize) * var(--inputLineHeight))
  );
  --inputTransitionDuration: var(--transitionDuration);
  --inputTransitionTF: var(--transitionTF);
}

*,
*::before,
*::after {
  box-sizing: border-box;
}

.Input {
  position: relative;
}

.Input_text {
    cursor: pointer;
    font-size: 14px;
  display: block;
  margin: 0;
  padding: var(--inputPaddingV) var(--inputPaddingH);
  color: inherit;
  width: 40%;
  font-family: inherit;
  font-weight: inherit;
  line-height: var(--inputLineHeight);
  height: 20px;
  border: none;
  margin-top: 20px;
  border-radius: 0.4rem;
}

.Input_text::placeholder {
  color: #b0bec5;
}

.Input_text:focus {
    cursor: pointer;
  outline: none;
}

.Input-label {
    cursor: pointer;
  display: block;
  position: absolute;
  bottom: 50%;
  left: 1rem;
  color: #fff;
  font-family: inherit;
  font-weight: inherit;
  line-height: var(--inputLineHeight);
  opacity: 0;
  transform: translate3d(0, var(--labelDefaultPosY), 0) scale(1);
  transform-origin: 0 0;
  transition: opacity var(--inputTransitionDuration) var(--inputTransitionTF),
    transform var(--inputTransitionDuration) var(--inputTransitionTF),
    visibility 0ms var(--inputTransitionDuration) var(--inputTransitionTF),
    z-index 0ms var(--inputTransitionDuration) var(--inputTransitionTF);
}

.Input_text:placeholder-shown + .Input-label {
  visibility: hidden;
  z-index: -1;
}

.Input_text:not(:placeholder-shown) + .Input-label,
.Input_text:focus:not(:placeholder-shown) + .Input-label {
  visibility: visible;
  z-index: 1;
  opacity: 1;
  transform: translate3d(0, var(--labelTransformedPosY), 0)
    scale(var(--labelScaleFactor));
  transition: transform var(--inputTransitionDuration), visibility 0ms,
    z-index 0ms;
}
.Input_date{
    margin-top: 40px;
}

.select {
	position: relative;
	min-width: 200px;
    margin-top: 30px;
	svg {
		position: absolute;
		right: 12px;
		top: calc(50% - 3px);
		width: 10px;
		height: 6px;
		stroke-width: 2px;
		stroke: #9098a9;
		fill: none;
		stroke-linecap: round;
		stroke-linejoin: round;
		pointer-events: none;
	}
	select {
		-webkit-appearance: none;
		padding: 7px 40px 7px 12px;
		width: 30%;
		border: 1px solid #e8eaed;
		border-radius: 5px;
		background: #fff;
		box-shadow: 0 1px 3px -2px #9098a9;
		cursor: pointer;
		font-family: inherit;
		font-size: 16px;
		transition: all 150ms ease;
		&:required {
			&:invalid {
				color: #5a667f;
			}
		}
		option {
			color: #223254;
		}
		option[value=""][disabled] {
			display: none;
		}
		&:focus {
			outline: none;
			border-color: #07f;
			box-shadow: 0 0 0 2px rgba(0,119,255,0.2);
		}
		&:hover {
			& + svg {
				stroke: #07f;
			}
		}
	}
}
.sprites {
	position: absolute;
	width: 0;
	height: 0;
	pointer-events: none;
	user-select: none;
}

.date__container{
    margin-top: 30px;
}